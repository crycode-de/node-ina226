name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - "*"
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
            node-version: 22.x

      - name: Install dependencies
        run: npm ci

      - name: Create a build
        run: npm run build

      - name: Lint source code
        run: npm run lint

  # Deploys the final package to NPM
  deploy:
    needs: [lint]

    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Extract the version and commit body from the tag
        id: extract_release
        # The body may be multiline, therefore newlines and % need to be escaped
        run: |
          VERSION="${{ github.ref }}"
          VERSION=${VERSION##*/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          git show -s --format=%b > .gh-release-notes.txt

      - name: Install Dependencies
        run: npm ci

      - name: Create a clean build
        run: npm run build

      - name: Publish package to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish --access public

      - name: Create Github Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          body_path: .gh-release-notes.txt
          name: Release v${{ steps.extract_release.outputs.VERSION }}
          # Prerelease versions create prereleases on Github
          prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          generate_release_notes: true
          files: |
            ina226-${{ steps.extract_release.outputs.VERSION }}.tgz
